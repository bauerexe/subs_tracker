// Code generated by MockGen. DO NOT EDIT.
// Source: subs_tracker/internal/usecase (interfaces: SubscriptionRepository)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"
	entity "subs_tracker/internal/entity"
	usecase "subs_tracker/internal/usecase"

	gomock "github.com/golang/mock/gomock"
)

// MockSubscriptionRepository is a mock of SubscriptionRepository interface.
type MockSubscriptionRepository struct {
	ctrl     *gomock.Controller
	recorder *MockSubscriptionRepositoryMockRecorder
}

// MockSubscriptionRepositoryMockRecorder is the mock recorder for MockSubscriptionRepository.
type MockSubscriptionRepositoryMockRecorder struct {
	mock *MockSubscriptionRepository
}

// NewMockSubscriptionRepository creates a new mock instance.
func NewMockSubscriptionRepository(ctrl *gomock.Controller) *MockSubscriptionRepository {
	mock := &MockSubscriptionRepository{ctrl: ctrl}
	mock.recorder = &MockSubscriptionRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSubscriptionRepository) EXPECT() *MockSubscriptionRepositoryMockRecorder {
	return m.recorder
}

// CostSubsByFilter mocks base method.
func (m *MockSubscriptionRepository) CostSubsByFilter(arg0 context.Context, arg1 usecase.SubFilter) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CostSubsByFilter", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CostSubsByFilter indicates an expected call of CostSubsByFilter.
func (mr *MockSubscriptionRepositoryMockRecorder) CostSubsByFilter(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CostSubsByFilter", reflect.TypeOf((*MockSubscriptionRepository)(nil).CostSubsByFilter), arg0, arg1)
}

// DeleteSub mocks base method.
func (m *MockSubscriptionRepository) DeleteSub(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSub", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSub indicates an expected call of DeleteSub.
func (mr *MockSubscriptionRepositoryMockRecorder) DeleteSub(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSub", reflect.TypeOf((*MockSubscriptionRepository)(nil).DeleteSub), arg0, arg1)
}

// GetSubByID mocks base method.
func (m *MockSubscriptionRepository) GetSubByID(arg0 context.Context, arg1 int64) (*entity.Subscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubByID", arg0, arg1)
	ret0, _ := ret[0].(*entity.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSubByID indicates an expected call of GetSubByID.
func (mr *MockSubscriptionRepositoryMockRecorder) GetSubByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubByID", reflect.TypeOf((*MockSubscriptionRepository)(nil).GetSubByID), arg0, arg1)
}

// ListSubsByFilter mocks base method.
func (m *MockSubscriptionRepository) ListSubsByFilter(arg0 context.Context, arg1 usecase.SubFilter) ([]*entity.Subscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSubsByFilter", arg0, arg1)
	ret0, _ := ret[0].([]*entity.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSubsByFilter indicates an expected call of ListSubsByFilter.
func (mr *MockSubscriptionRepositoryMockRecorder) ListSubsByFilter(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSubsByFilter", reflect.TypeOf((*MockSubscriptionRepository)(nil).ListSubsByFilter), arg0, arg1)
}

// SaveSub mocks base method.
func (m *MockSubscriptionRepository) SaveSub(arg0 context.Context, arg1 *entity.Subscription) (*entity.Subscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveSub", arg0, arg1)
	ret0, _ := ret[0].(*entity.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveSub indicates an expected call of SaveSub.
func (mr *MockSubscriptionRepositoryMockRecorder) SaveSub(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveSub", reflect.TypeOf((*MockSubscriptionRepository)(nil).SaveSub), arg0, arg1)
}

// UpdateSub mocks base method.
func (m *MockSubscriptionRepository) UpdateSub(arg0 context.Context, arg1 *entity.Subscription) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSub", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateSub indicates an expected call of UpdateSub.
func (mr *MockSubscriptionRepositoryMockRecorder) UpdateSub(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSub", reflect.TypeOf((*MockSubscriptionRepository)(nil).UpdateSub), arg0, arg1)
}
