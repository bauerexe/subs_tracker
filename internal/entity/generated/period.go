// Code generated by go-swagger; DO NOT EDIT.

package generated

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Period Период MM-YYYY (границы включительно)
//
// swagger:model Period
type Period struct {

	// end date
	// Example: 12-2025
	// Pattern: ^(0[1-9]|1[0-2])-\d{4}$
	EndDate string `json:"end_date,omitempty"`

	// start date
	// Example: 07-2025
	// Pattern: ^(0[1-9]|1[0-2])-\d{4}$
	StartDate string `json:"start_date,omitempty"`
}

// Validate validates this period
func (m *Period) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEndDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartDate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Period) validateEndDate(formats strfmt.Registry) error {
	if swag.IsZero(m.EndDate) { // not required
		return nil
	}

	if err := validate.Pattern("end_date", "body", m.EndDate, `^(0[1-9]|1[0-2])-\d{4}$`); err != nil {
		return err
	}

	return nil
}

func (m *Period) validateStartDate(formats strfmt.Registry) error {
	if swag.IsZero(m.StartDate) { // not required
		return nil
	}

	if err := validate.Pattern("start_date", "body", m.StartDate, `^(0[1-9]|1[0-2])-\d{4}$`); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this period based on context it is used
func (m *Period) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *Period) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Period) UnmarshalBinary(b []byte) error {
	var res Period
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
