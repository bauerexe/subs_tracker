// Code generated by go-swagger; DO NOT EDIT.

package generated

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SubscriptionInput subscription input
//
// swagger:model SubscriptionInput
type SubscriptionInput struct {

	// cost
	// Example: 400
	// Required: true
	Cost *int64 `json:"cost"`

	// end date
	// Example: 12-2025
	EndDate string `json:"end_date,omitempty"`

	// service name
	// Example: Yandex Plus
	// Required: true
	// Min Length: 1
	ServiceName *string `json:"service_name"`

	// start date
	// Example: 07-2025
	// Required: true
	StartDate *string `json:"start_date"`

	// user id
	// Example: 60601fee-2bf1-4721-ae6f-7636e79a0cba
	// Required: true
	// Format: uuid
	UserID *strfmt.UUID `json:"user_id"`
}

// Validate validates this subscription input
func (m *SubscriptionInput) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCost(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateServiceName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SubscriptionInput) validateCost(formats strfmt.Registry) error {

	if err := validate.Required("cost", "body", m.Cost); err != nil {
		return err
	}

	return nil
}

func (m *SubscriptionInput) validateServiceName(formats strfmt.Registry) error {

	if err := validate.Required("service_name", "body", m.ServiceName); err != nil {
		return err
	}

	if err := validate.MinLength("service_name", "body", *m.ServiceName, 1); err != nil {
		return err
	}

	return nil
}

func (m *SubscriptionInput) validateStartDate(formats strfmt.Registry) error {

	if err := validate.Required("start_date", "body", m.StartDate); err != nil {
		return err
	}

	return nil
}

func (m *SubscriptionInput) validateUserID(formats strfmt.Registry) error {

	if err := validate.Required("user_id", "body", m.UserID); err != nil {
		return err
	}

	if err := validate.FormatOf("user_id", "body", "uuid", m.UserID.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this subscription input based on context it is used
func (m *SubscriptionInput) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *SubscriptionInput) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SubscriptionInput) UnmarshalBinary(b []byte) error {
	var res SubscriptionInput
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
